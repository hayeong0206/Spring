//테이블 생성하기 .sql 파일
drop table if exists member CASCADE;
create table member(
        id   bigint generated by default as identity,
        name varchar(255),
        primary key (id)
);

//스프링 통합테스트
// 회원 서비스 스프링 통합 테스트
package hello.hellospring.service;
import hello.hellospring.domain.Member;
import hello.hellospring.repository.MemberRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
@SpringBootTest
@Transactional
class MemberServiceIntegrationTest {
        @Autowired MemberService memberService;
        @Autowired MemberRepository memberRepository;
        @Test
        public void 회원가입() throws Exception {
                //Given
                Member member = new Member();
                member.setName("hello");
                //When
                Long saveId = memberService.join(member);
                //Then
                Member findMember = memberRepository.findById(saveId).get();
                assertEquals(member.getName(), findMember.getName());
        }
        @Test
        public void 중복_회원_예외() throws Exception {
                //Given
                Member member1 = new Member();
                member1.setName("spring");

                Member member2 = new Member();
                member2.setName("spring");
                //When
                memberService.join(member1);
                IllegalStateException e = assertThrows(IllegalStateException.class,
                        () -> memberService.join(member2));//예외가 발생해야 한다.
                assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");
        }
}

//스프링 JdbcTemplate 회원 리포지토리
package hello.hellospring.repository;
import hello.hellospring.domain.Member;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
public class JdbcTemplateMemberRepository implements MemberRepository {
        private final JdbcTemplate jdbcTemplate;
        public JdbcTemplateMemberRepository(DataSource dataSource) {
                jdbcTemplate = new JdbcTemplate(dataSource);
        }
        @Override
        public Member save(Member member) {
                SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
                jdbcInsert.withTableName("member").usingGeneratedKeyColumns("id");
                Map<String, Object> parameters = new HashMap<>();
                parameters.put("name", member.getName());
                Number key = jdbcInsert.executeAndReturnKey(new
                        MapSqlParameterSource(parameters));
                member.setId(key.longValue());
                return member;
        }
        @Override
        public Optional<Member> findById(Long id) {
                List<Member> result = jdbcTemplate.query("select * from member where id
                        = ?", memberRowMapper(), id);
                return result.stream().findAny();
        }
        @Override
        public List<Member> findAll() {
                return jdbcTemplate.query("select * from member", memberRowMapper());
        }
        @Override
        public Optional<Member> findByName(String name) {
                List<Member> result = jdbcTemplate.query("select * from member where
                        name = ?", memberRowMapper(), name);
                return result.stream().findAny();
        }
        private RowMapper<Member> memberRowMapper() {
                return (rs, rowNum) -> {
                        Member member = new Member();
                        member.setId(rs.getLong("id"));
                        member.setName(rs.getString("name"));
                        return member;
                };
        }
}
//JdbcTemplate를 사용하도록 스프링 설정 변경
package hello.hellospring;
import hello.hellospring.repository.JdbcMemberRepository;
import hello.hellospring.repository.JdbcTemplateMemberRepository;
import hello.hellospring.repository.MemberRepository;
import hello.hellospring.repository.MemoryMemberRepository;
import hello.hellospring.service.MemberService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.sql.DataSource;
@Configuration
public class SpringConfig {
        private final DataSource dataSource;
        public SpringConfig(DataSource dataSource) {
                this.dataSource = dataSource;
        }
        @Bean
        public MemberService memberService() {
                return new MemberService(memberRepository());
        }
        @Bean
        public MemberRepository memberRepository() {
                return new MemoryMemberRepository();
                return new JdbcMemberRepository(dataSource);
                return new JdbcTemplateMemberRepository(dataSource);
        }
}

//JPA

//JPA 엔티티 매핑
package hello.hellospring.domain;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Member {
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String name;
        public Long getId() {
                return id;
        }
        public void setId(Long id) {
                this.id = id;
        }
        public String getName() {
                return name;
        }
        public void setName(String name) {
                this.name = name;
        }
}

//JPA 회원 리포지토리
package hello.hellospring.repository;
import hello.hellospring.domain.Member;
import javax.persistence.EntityManager;
import java.util.List;
import java.util.Optional;
public class JpaMemberRepository implements MemberRepository {
        private final EntityManager em;
        public JpaMemberRepository(EntityManager em) {
                this.em = em;
        }
        public Member save(Member member) {
                em.persist(member);
                return member;
        }
        public Optional<Member> findById(Long id) {
                Member member = em.find(Member.class, id);
                return Optional.ofNullable(member);
        }
        public List<Member> findAll() {
                return em.createQuery("select m from Member m", Member.class)
        }
        public Optional<Member> findByName(String name) {
                List<Member> result = em.createQuery("select m from Member m where
                        m.name = :name", Member.class)
                        .setParameter("name", name)
                        .getResultList();
                return result.stream().findAny();
        }
}

//서비스 계층에 트랜잭션 추가
import org.springframework.transaction.annotation.Transactional
@Transactional
public class MemberService {}

//JPA를 사용하도록 스프링 설정 변경
package hello.hellospring;
import hello.hellospring.repository.*;
import hello.hellospring.service.MemberService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.persistence.EntityManager;
import javax.sql.DataSource;
@Configuration
public class SpringConfig {
        private final DataSource dataSource;
        private final EntityManager em;
        public SpringConfig(DataSource dataSource, EntityManager em) {
                this.dataSource = dataSource;
                this.em = em;
        }
        @Bean
        public MemberService memberService() {
                return new MemberService(memberRepository());
        }
        @Bean
        public MemberRepository memberRepository() {
                //return new MemoryMemberRepository();
                //return new JdbcMemberRepository(dataSource);
                //return new JdbcTemplateMemberRepository(dataSource);
                return new JpaMemberRepository(em);
        }
}

//스프링 데이터 JPA
//스프링 데이터 JPA 회원 리포지토리
package hello.hellospring.repository;
import hello.hellospring.domain.Member;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface SpringDataJpaMemberRepository extends JpaRepository<Member,
        Long>, MemberRepository {
        Optional<Member> findByName(String name);
}

//스프링 데이터 JPA 회원 리포지토리를 사용하도록 스프링 설정 변경 \
package hello.hellospring;
import hello.hellospring.repository.*;
import hello.hellospring.service.MemberService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Configuration
public class SpringConfig {
        private final MemberRepository memberRepository;
        public SpringConfig(MemberRepository memberRepository) {
                this.memberRepository = memberRepository;
        }
        @Bean
        public MemberService memberService() {
                return new MemberService(memberRepository);
        }
}